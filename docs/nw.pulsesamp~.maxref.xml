<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<c74object name="nw.pulsesamp~" module="msp" category="LowkeyNW, MSP Sampling">

	<digest>
		Trigger sample playback with a pulse signal
	</digest>
	
	<description>
		A playback interface for the <o>buffer~</o> object that is triggered using pulse control signals like those generated from the <o>train~</o> object.
		This allows for sample-accurate triggering of a recorded audio segment whenever a 0 to 1 transition is received.
		Once segment playback is initiated, any changes to the parameters (such as sampling increment, start time, or end time) are deferred internally by this object until the next segment.
	</description>
	
	<!--METADATA-->
	<metadatalist>
		<metadata name="author">Nathan Wolek</metadata>
		<metadata name="tag">LowkeyNW</metadata>
		<metadata name="tag">Audio</metadata>
		<metadata name="tag">Sampling</metadata>
		<metadata name="tag">64-bit</metadata>
	</metadatalist>
	
	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="signal">
			<digest>Pulse signal. Playback is triggered on 0 to 1 transition.</digest>
		</inlet>
		<inlet id="1" type="signal/float">
			<digest>Sample increment. Effects perceived pitch, 1.0 = unchanged.</digest>
		</inlet>
		<inlet id="2" type="signal/float">
			<digest>Gain multiplier, 1.0 = unchanged.</digest>
		</inlet>
		<inlet id="3" type="signal/float">
			<digest>Start time in milliseconds.</digest>
		</inlet>
		<inlet id="4" type="signal/float">
			<digest>End time in milliseconds.</digest>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="signal">
			<digest>Audio signal: audio channel 1</digest>
		</outlet>
		<outlet id="1" type="signal">
			<digest>Audio signal: audio channel 2</digest>
		</outlet>
		<outlet id="2" type="signal">
			<digest>Audio signal: sample count since playback started. -1 = no playback.</digest>
		</outlet>
		<outlet id="3" type="signal">
			<digest>Audio signal: overflow outlet.</digest>
		</outlet>
	</outletlist>
	
	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="buffer-name" optional="0" type="symbol">
			<digest>
				Buffer object name
			</digest>
			<description>
				The first argument names the <o>buffer~</o> object whose sample memory is used by this object for playback.
				For more information about how this sample memory is handled, see documentation for the <m>set</m> message.
			</description>
		</objarg>
	</objarglist>
	
	<!--MESSAGES-->
	<methodlist>
		<method name="int">
			<arglist>
				<arg name="parameter-settings" optional="0" type="int" />
			</arglist>
			<digest>
				Function depends on inlet
			</digest>
			<description>
				Numbers can be used instead of signal objects to control sampling increment, gain multiplier, start time and end time. If a <m>signal</m> is also connected to the inlet, <m>float</m> and <m>int</m> messages will be ignored.
			</description>
		</method>
		<method name="float">
			<arglist>
				<arg name="parameter-settings" optional="0" type="float" />
			</arglist>
			<digest>
				Function depends on inlet
			</digest>
			<description>
				Numbers can be used instead of signal objects to control sampling increment, gain multiplier, start time and end time. If a <m>signal</m> is also connected to the inlet, <m>float</m> and <m>int</m> messages will be ignored.
			</description>
		</method>
		<method name="signal">
			<arglist />
			<digest>
				Function depends on inlet
			</digest>
			<description>
				In inlet 1: 0 to 1 transition from a pulse signal will trigger playback of the defined <o>buffer~</o> segment.
				During segment playback, the object passes any additional pulses that are received to the overflow outlet, which allows several <b>nw.pulsesamp~</b> objects to be chained together and form a multi-voice sampler.
				<br />
				<br />
				After playback begins, changes received by the following inlets will be deferred to the start of the next segment:
				<br />
				<br />
				In inlet 2: Defines the sample increment used while reading <o>buffer~</o> contents.
				This changes the perceived pitch and the playback speed, with 1.0 resulting in normal playback.
				The absolute value of any negative numbers are used to prevent buffer overrun errors.
				If backward playback is desired, use the <b>reverse 1</b> message.
				<br />
				<br />
				In inlet 3: Defines the gain multiplier.
				All values read from the <o>buffer~</o> contents will be scaled by this number, with 1.0 resulting in no change.
				<br />
				<br />
				In inlet 4: Defines the start time in milliseconds of the <o>buffer~</o> segment for playback. 
				<br />
				<br />
				In inlet 5: Defines the end time in milliseconds of the <o>buffer~</o> segment for playback.
				<br />
				<br />
			</description>
		</method>
		<method name="set">
			<arglist>
				<arg name="buffer-name" optional="0" type="symbol" />
			</arglist>
			<digest>
				Set the name of the <o>buffer~</o> used for playback
			</digest>
			<description>
				The word <m>set</m>, followed by the name of a <o>buffer~</o> object, uses that <o>buffer~</o> for playback.
				Note that the <o>buffer~</o> object can have up to 2 channels.
				In the case of 1 channel (mono), the sound produced by both the first and second outlets will be the same.
				In the case of 2 channels (stereo), the first outlet will playback sound from the first channel (left) and the second outlet will playback sound from the second channel (right).
				Changes sent by the <m>set</m> message are deferred to the start of the next segment. 
			</description>
		</method>
		<method name="reverse">
			<arglist>
				<arg name="reverse" optional="0" type="int" />
			</arglist>
			<digest>
				Read the defined <o>buffer~</o> segment backwards. Default is off.
			</digest>
			<description>
				A <m>reverse 1</m> message will play the defined <o>buffer~</o> segment backwards.
				A <m>reverse 0</m> message will play the defined <o>buffer~</o> segment forward.
				Changes sent by the <m>reverse</m> message are deferred to the start of the next segment. 
			</description>
		</method>
		<method name="interpolation">
			<arglist>
				<arg name="interpolation" optional="0" type="int" />
			</arglist>
			<digest>
				Use interpolation while reading samples from the <o>buffer~</o>. Default is on.
			</digest>
			<description>
				An <m>interpolation 1</m> message will use linear interpolation while reading from the <o>buffer~</o>.
				An <m>interpolation 0</m> message will use no interpolation while reading from the <o>buffer~</o>.
			</description>
		</method>
		<method name="getinfo">
			<arglist />
			<digest>
				Post information about object to Max window
			</digest>
			<description>
				Retrieves basic information about the object author and when the object was last updated. Date can be used to identify different versions of the objects in circulation.
			</description>
		</method>
	</methodlist>
	
	<!--SEEALSO-->
	<seealsolist>
		<seealso name="buffer~"/>
		<seealso name="play~"/>
		<seealso name="groove~" />
		<seealso name="record~" />
		<seealso name="wave~" />
		<seealso name="index~" />
	</seealsolist>
	
</c74object>